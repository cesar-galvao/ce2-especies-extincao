simples = str_replace_all(simples, ":|/|\\(|\\)|-", " "), #remove simbolos indesejados
simples = str_squish(simples)) %>% #padroniza quantidade de espacos e trim edges
select(simples) #deixa so essa variavel
data2$simples <- iconv(data2$simples,from="UTF-8",to="ASCII//TRANSLIT")
#remove diacriticos
data2$novos <- NA
### SUBSTITUICAO DOS ; ESPECIFICOS POR , ----
for (i in 1:dim(data2[1])) {
#extrai as strings no padrao e substitui ; por , em uma df nova
repo <- str_extract_all(data2[i,1], pattern = "\'[a-zA-Z; ]+\'") %>% as.data.frame()
repo[,1] <- str_replace_all(repo[,1], pattern = ";", replacement = ".")
#cria uma df com marcadores no lugar da string extraída
replace <- data2[i,]
for (j in 1:dim(repo)[1]){
replace <- str_replace(replace, pattern = "\'[a-zA-Z; ]+\'",
replacement = paste("repo", as.character(j), sep = ""))
}
# pra cada linha de repo, ie intervalos a serem substituidos
for(k in 1:dim(repo)[1]){ #substitua o termo "repo(j)" pela linha j de repo
substituto <- repo[j,1]
replace <- str_replace_all(replace,
pattern = paste("repo", as.character(k), sep = ""),
replacement = repo[k,1])
}
data2[i,2] <- replace[1]
}
#cria uma nova variável com o texto final ----
data2$substituicoes <- data2[,1]
data2$substituicoes[which(is.na(data2[,2]) == FALSE)] <- data2[which(is.na(data2[,2]) == FALSE),2]
#adquire nomes das variaveis do banco final ----
nomes <- read.csv('./data/arquivos intermediarios/especies_2020.csv', sep = ';', encoding = 'UTF-8', header = FALSE, nrows = 1)
nomes <- as.character(nomes[1,]) %>%
str_remove_all(pattern = ",")%>%
str_trim()
#cria banco final para povoamento ----
especies_2020_limpo <- data.frame(subs = data2$substituicoes) %>%
separate(subs, into = nomes, sep = ";")
#ajustamento do 1 caso que nao se ajusta ----
cobra <- "Fauna; Repteis; Dipsadidae; Hydrodynastes melanogigas; Cobra dagua grande do tocantins;
Em Perigo EN; EN; Cerrado; 'Assentamento Humano cidades, Outras Atividades Economicas Energia'; Sim;
Sim; Nao; 2; Sim; Informacao nao disponivel"
cobra_df <- data.frame(subs = cobra) %>%
separate(subs, into = nomes, sep = ";")
#insercao do caso final ----
especies_2020_limpo[1436,] <- cobra_df[1,]
#remocao final de aspas simples ----
especies_2020_pronto <- map_df(especies_2020_limpo, str_remove_all, pattern = "\\'")
especies_2020_pronto <- map_df(especies_2020_pronto, as.character)
especies_2020_pronto <- map_df(especies_2020_pronto, str_squish)
#producao de arquivo final rda e csv ----
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]")) %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = "\\. ") %>%
separate_rows(principais_ameacas, sep = ", ") %>%
separate_rows(principais_ameacas, sep = " , ") %>%
separate_rows(principais_ameacas, sep = "\\. ") %>%
separate_rows(estados_de_ocorrencia, sep = " ") %>%
mutate(bioma = str_remove_all(bioma, pattern = "[:punct:]"))
# outras atividades economicas: remover termo, dividir linhas
saveRDS(final, './data/especies_2020_pronto.RDS')
write.csv(final, './data/especies_2020_pronto.csv')
rm(cobra_df, data, data2, especies_2020_limpo, especies_2020_pronto, repo, cobra,
i, j, k, nomes, replace, substituto)
runApp('shiny/teste/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
?unique
final %>% distinct(bioma)
runApp('shiny/app-especies-teste.R')
runApp('app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
data <- readRDS("./data/especies_2020_pronto.RDS") %>%
filter(fauna_flora != "")
View(data)
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
?tabItem
?tabItems
?tabBox
?renderText
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
### PACOTES NECESSARIOS ----
library(tidyverse)
library(data.table)
library(janitor)
### LEITURA DO ARQUIVO ----
# ler o arquivo considerando as aspas como parte do texto,
#cada obs é uma linha, uma única variável
data <- read.csv('./data/arquivos intermediarios/especies_2020.csv', sep = '\n', encoding = 'UTF-8', quote = "\"", skip = 1, header = FALSE)
### SIMPLIFICACAO DA GRAFIA ----
data2 <- data %>%
mutate(#alterado = str_remove_all(V1, pattern = ","), #remove virgulas indesejadas
simples = str_replace_all(V1, pattern = "\"", replacement = "\'"),
#troca aspas duplas do texto por simples
simples = str_replace_all(simples, ";", "; "), #padroniza espacos de ;
simples = str_replace_all(simples, ":|/|\\(|\\)|-", " "), #remove simbolos indesejados
simples = str_squish(simples)) %>% #padroniza quantidade de espacos e trim edges
select(simples) #deixa so essa variavel
data2$simples <- iconv(data2$simples,from="UTF-8",to="ASCII//TRANSLIT")
#remove diacriticos
data2$novos <- NA
### SUBSTITUICAO DOS ; ESPECIFICOS POR , ----
for (i in 1:dim(data2[1])) {
#extrai as strings no padrao e substitui ; por , em uma df nova
repo <- str_extract_all(data2[i,1], pattern = "\'[a-zA-Z; ]+\'") %>% as.data.frame()
repo[,1] <- str_replace_all(repo[,1], pattern = ";", replacement = ".")
#cria uma df com marcadores no lugar da string extraída
replace <- data2[i,]
for (j in 1:dim(repo)[1]){
replace <- str_replace(replace, pattern = "\'[a-zA-Z; ]+\'",
replacement = paste("repo", as.character(j), sep = ""))
}
# pra cada linha de repo, ie intervalos a serem substituidos
for(k in 1:dim(repo)[1]){ #substitua o termo "repo(j)" pela linha j de repo
substituto <- repo[j,1]
replace <- str_replace_all(replace,
pattern = paste("repo", as.character(k), sep = ""),
replacement = repo[k,1])
}
data2[i,2] <- replace[1]
}
#cria uma nova variável com o texto final ----
data2$substituicoes <- data2[,1]
data2$substituicoes[which(is.na(data2[,2]) == FALSE)] <- data2[which(is.na(data2[,2]) == FALSE),2]
#adquire nomes das variaveis do banco final ----
nomes <- read.csv('./data/arquivos intermediarios/especies_2020.csv', sep = ';', encoding = 'UTF-8', header = FALSE, nrows = 1)
nomes <- as.character(nomes[1,]) %>%
str_remove_all(pattern = ",")%>%
str_trim()
#cria banco final para povoamento ----
especies_2020_limpo <- data.frame(subs = data2$substituicoes) %>%
separate(subs, into = nomes, sep = ";")
#ajustamento do 1 caso que nao se ajusta ----
cobra <- "Fauna; Repteis; Dipsadidae; Hydrodynastes melanogigas; Cobra dagua grande do tocantins;
Em Perigo EN; EN; Cerrado; 'Assentamento Humano cidades, Outras Atividades Economicas Energia'; Sim;
Sim; Nao; 2; Sim; Informacao nao disponivel"
cobra_df <- data.frame(subs = cobra) %>%
separate(subs, into = nomes, sep = ";")
#insercao do caso final ----
especies_2020_limpo[1436,] <- cobra_df[1,]
#remocao final de aspas simples ----
especies_2020_pronto <- map_df(especies_2020_limpo, str_remove_all, pattern = "\\'")
especies_2020_pronto <- map_df(especies_2020_pronto, as.character)
especies_2020_pronto <- map_df(especies_2020_pronto, str_squish)
#producao de arquivo final rda e csv ----
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]"))
View(final)
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]")) %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = "\\. ") %>%
separate_rows(principais_ameacas, sep = ", ") %>%
separate_rows(principais_ameacas, sep = " , ") %>%
separate_rows(principais_ameacas, sep = "\\. ") %>%
separate_rows(estados_de_ocorrencia, sep = " ") %>%
mutate(bioma = str_remove_all(bioma, pattern = "[:punct:]"))
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]"),
Bioma = str_replace(Bioma, "Caatinga Cerrado", "Caatinga, Cerrado")) %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = "\\. ") %>%
separate_rows(principais_ameacas, sep = ", ") %>%
separate_rows(principais_ameacas, sep = " , ") %>%
separate_rows(principais_ameacas, sep = "\\. ") %>%
separate_rows(estados_de_ocorrencia, sep = " ") %>%
mutate(bioma = str_remove_all(bioma, pattern = "[:punct:]"))
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]"),
bioma = str_replace(bioma, "Caatinga Cerrado", "Caatinga, Cerrado")) %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = "\\. ") %>%
separate_rows(principais_ameacas, sep = ", ") %>%
separate_rows(principais_ameacas, sep = " , ") %>%
separate_rows(principais_ameacas, sep = "\\. ") %>%
separate_rows(estados_de_ocorrencia, sep = " ") %>%
mutate(bioma = str_remove_all(bioma, pattern = "[:punct:]"))
View(final)
### PACOTES NECESSARIOS ----
library(tidyverse)
library(data.table)
library(janitor)
### LEITURA DO ARQUIVO ----
# ler o arquivo considerando as aspas como parte do texto,
#cada obs é uma linha, uma única variável
data <- read.csv('./data/arquivos intermediarios/especies_2020.csv', sep = '\n', encoding = 'UTF-8', quote = "\"", skip = 1, header = FALSE)
### SIMPLIFICACAO DA GRAFIA ----
data2 <- data %>%
mutate(#alterado = str_remove_all(V1, pattern = ","), #remove virgulas indesejadas
simples = str_replace_all(V1, pattern = "\"", replacement = "\'"),
#troca aspas duplas do texto por simples
simples = str_replace_all(simples, ";", "; "), #padroniza espacos de ;
simples = str_replace_all(simples, ":|/|\\(|\\)|-", " "), #remove simbolos indesejados
simples = str_squish(simples)) %>% #padroniza quantidade de espacos e trim edges
select(simples) #deixa so essa variavel
data2$simples <- iconv(data2$simples,from="UTF-8",to="ASCII//TRANSLIT")
#remove diacriticos
data2$novos <- NA
### SUBSTITUICAO DOS ; ESPECIFICOS POR , ----
for (i in 1:dim(data2[1])) {
#extrai as strings no padrao e substitui ; por , em uma df nova
repo <- str_extract_all(data2[i,1], pattern = "\'[a-zA-Z; ]+\'") %>% as.data.frame()
repo[,1] <- str_replace_all(repo[,1], pattern = ";", replacement = ".")
#cria uma df com marcadores no lugar da string extraída
replace <- data2[i,]
for (j in 1:dim(repo)[1]){
replace <- str_replace(replace, pattern = "\'[a-zA-Z; ]+\'",
replacement = paste("repo", as.character(j), sep = ""))
}
# pra cada linha de repo, ie intervalos a serem substituidos
for(k in 1:dim(repo)[1]){ #substitua o termo "repo(j)" pela linha j de repo
substituto <- repo[j,1]
replace <- str_replace_all(replace,
pattern = paste("repo", as.character(k), sep = ""),
replacement = repo[k,1])
}
data2[i,2] <- replace[1]
}
#cria uma nova variável com o texto final ----
data2$substituicoes <- data2[,1]
data2$substituicoes[which(is.na(data2[,2]) == FALSE)] <- data2[which(is.na(data2[,2]) == FALSE),2]
#adquire nomes das variaveis do banco final ----
nomes <- read.csv('./data/arquivos intermediarios/especies_2020.csv', sep = ';', encoding = 'UTF-8', header = FALSE, nrows = 1)
nomes <- as.character(nomes[1,]) %>%
str_remove_all(pattern = ",")%>%
str_trim()
#cria banco final para povoamento ----
especies_2020_limpo <- data.frame(subs = data2$substituicoes) %>%
separate(subs, into = nomes, sep = ";")
#ajustamento do 1 caso que nao se ajusta ----
cobra <- "Fauna; Repteis; Dipsadidae; Hydrodynastes melanogigas; Cobra dagua grande do tocantins;
Em Perigo EN; EN; Cerrado; 'Assentamento Humano cidades, Outras Atividades Economicas Energia'; Sim;
Sim; Nao; 2; Sim; Informacao nao disponivel"
cobra_df <- data.frame(subs = cobra) %>%
separate(subs, into = nomes, sep = ";")
#insercao do caso final ----
especies_2020_limpo[1436,] <- cobra_df[1,]
#remocao final de aspas simples ----
especies_2020_pronto <- map_df(especies_2020_limpo, str_remove_all, pattern = "\\'")
especies_2020_pronto <- map_df(especies_2020_pronto, as.character)
especies_2020_pronto <- map_df(especies_2020_pronto, str_squish)
#producao de arquivo final rda e csv ----
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]"),
bioma = str_replace(bioma, "Caatinga Cerrado", "Caatinga, Cerrado")) %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = "\\. ") %>%
separate_rows(principais_ameacas, sep = ", ") %>%
separate_rows(principais_ameacas, sep = " , ") %>%
separate_rows(principais_ameacas, sep = "\\. ") %>%
separate_rows(estados_de_ocorrencia, sep = " ") %>%
mutate(bioma = str_remove_all(bioma, pattern = "[:punct:]"))
# outras atividades economicas: remover termo, dividir linhas
saveRDS(final, './data/especies_2020_pronto.RDS')
write.csv(final, './data/especies_2020_pronto.csv')
rm(cobra_df, data, data2, especies_2020_limpo, especies_2020_pronto, repo, cobra,
i, j, k, nomes, replace, substituto)
View(final)
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
?icon
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
especies_2020_pronto %>%
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]"),
bioma = str_replace(bioma, "Caatinga Cerrado", "Caatinga, Cerrado")) %>%
saveRDS('./data/tratado_nao_sep.RDS')
### PACOTES NECESSARIOS ----
library(tidyverse)
library(data.table)
library(janitor)
### LEITURA DO ARQUIVO ----
# ler o arquivo considerando as aspas como parte do texto,
#cada obs é uma linha, uma única variável
data <- read.csv('./data/arquivos intermediarios/especies_2020.csv', sep = '\n', encoding = 'UTF-8', quote = "\"", skip = 1, header = FALSE)
### SIMPLIFICACAO DA GRAFIA ----
data2 <- data %>%
mutate(#alterado = str_remove_all(V1, pattern = ","), #remove virgulas indesejadas
simples = str_replace_all(V1, pattern = "\"", replacement = "\'"),
#troca aspas duplas do texto por simples
simples = str_replace_all(simples, ";", "; "), #padroniza espacos de ;
simples = str_replace_all(simples, ":|/|\\(|\\)|-", " "), #remove simbolos indesejados
simples = str_squish(simples)) %>% #padroniza quantidade de espacos e trim edges
select(simples) #deixa so essa variavel
data2$simples <- iconv(data2$simples,from="UTF-8",to="ASCII//TRANSLIT")
#remove diacriticos
data2$novos <- NA
### SUBSTITUICAO DOS ; ESPECIFICOS POR , ----
for (i in 1:dim(data2[1])) {
#extrai as strings no padrao e substitui ; por , em uma df nova
repo <- str_extract_all(data2[i,1], pattern = "\'[a-zA-Z; ]+\'") %>% as.data.frame()
repo[,1] <- str_replace_all(repo[,1], pattern = ";", replacement = ".")
#cria uma df com marcadores no lugar da string extraída
replace <- data2[i,]
for (j in 1:dim(repo)[1]){
replace <- str_replace(replace, pattern = "\'[a-zA-Z; ]+\'",
replacement = paste("repo", as.character(j), sep = ""))
}
# pra cada linha de repo, ie intervalos a serem substituidos
for(k in 1:dim(repo)[1]){ #substitua o termo "repo(j)" pela linha j de repo
substituto <- repo[j,1]
replace <- str_replace_all(replace,
pattern = paste("repo", as.character(k), sep = ""),
replacement = repo[k,1])
}
data2[i,2] <- replace[1]
}
#cria uma nova variável com o texto final ----
data2$substituicoes <- data2[,1]
data2$substituicoes[which(is.na(data2[,2]) == FALSE)] <- data2[which(is.na(data2[,2]) == FALSE),2]
#adquire nomes das variaveis do banco final ----
nomes <- read.csv('./data/arquivos intermediarios/especies_2020.csv', sep = ';', encoding = 'UTF-8', header = FALSE, nrows = 1)
nomes <- as.character(nomes[1,]) %>%
str_remove_all(pattern = ",")%>%
str_trim()
#cria banco final para povoamento ----
especies_2020_limpo <- data.frame(subs = data2$substituicoes) %>%
separate(subs, into = nomes, sep = ";")
#ajustamento do 1 caso que nao se ajusta ----
cobra <- "Fauna; Repteis; Dipsadidae; Hydrodynastes melanogigas; Cobra dagua grande do tocantins;
Em Perigo EN; EN; Cerrado; 'Assentamento Humano cidades, Outras Atividades Economicas Energia'; Sim;
Sim; Nao; 2; Sim; Informacao nao disponivel"
cobra_df <- data.frame(subs = cobra) %>%
separate(subs, into = nomes, sep = ";")
#insercao do caso final ----
especies_2020_limpo[1436,] <- cobra_df[1,]
#remocao final de aspas simples ----
especies_2020_pronto <- map_df(especies_2020_limpo, str_remove_all, pattern = "\\'")
especies_2020_pronto <- map_df(especies_2020_pronto, as.character)
especies_2020_pronto <- map_df(especies_2020_pronto, str_squish)
#producao de arquivo final rda e csv ----
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]"),
bioma = str_replace(bioma, "Caatinga Cerrado", "Caatinga, Cerrado")) %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = "\\. ") %>%
separate_rows(principais_ameacas, sep = ", ") %>%
separate_rows(principais_ameacas, sep = " , ") %>%
separate_rows(principais_ameacas, sep = "\\. ") %>%
separate_rows(estados_de_ocorrencia, sep = " ") %>%
mutate(bioma = str_remove_all(bioma, pattern = "[:punct:]"))
# outras atividades economicas: remover termo, dividir linhas
saveRDS(final, './data/especies_2020_pronto.RDS')
write.csv(final, './data/especies_2020_pronto.csv')
especies_2020_pronto %>%
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]"),
bioma = str_replace(bioma, "Caatinga Cerrado", "Caatinga, Cerrado")) %>%
saveRDS('./data/tratado_nao_sep.RDS')
rm(cobra_df, data, data2, especies_2020_limpo, especies_2020_pronto, repo, cobra,
i, j, k, nomes, replace, substituto)
tratado_nao_sep <- readRDS("~/UnB/4 Semestre/CE2/ce2-especies-extincao/data/tratado_nao_sep.RDS")
View(tratado_nao_sep)
runApp('shiny/app-especies-teste.R')
glimpse(tratado_nao_sep)
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
original%>%
select(fauna_flora, grupo, familia, especie_simplificado, sigla_categoria_de_ameaca,
bioma, principais_ameacas) %>% datatable()
original <- readRDS("./data/tratado_nao_sep.RDS")
original%>%
select(fauna_flora, grupo, familia, especie_simplificado, sigla_categoria_de_ameaca,
bioma, principais_ameacas) %>% datatable()
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
?renderUI
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
?box
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
library(shiny); runApp('shiny/app-especies-teste.R')
runApp('shiny/app-especies-teste.R')
library(shiny); runApp('shiny/app-especies-teste.R')
#pacotes
library(tidyverse)
library(dplyr)
library(ggplot2)
library(janitor)
#definindo diretório e baixando os dados
data <-readRDS("especies_2020_pronto.RDS")
#vendo o banco de dados
glimpse(data)
#definindo diretório e baixando os dados
data <-readRDS("./data/especies_2020_pronto.RDS")
#vendo o banco de dados
glimpse(data)
data %>%
filter(sigla_categoria_de_ameaca == "CR PEW"|
sigla_categoria_de_ameaca == "EW"|
sigla_categoria_de_ameaca == "CR PEX") %>%
group_by(sigla_categoria_de_ameaca, especie_simplificado, nome_comum) %>%
count()
data %>%
distinct(sigla_categoria_de_ameaca, especie_simplificado)
ta %>%
distinct(sigla_categoria_de_ameaca, especie_simplificado)%>%
group_by(sigla_categoria_de_ameaca)%>%
count()
data %>%
distinct(sigla_categoria_de_ameaca, especie_simplificado)%>%
group_by(sigla_categoria_de_ameaca)%>%
count()
which(data$sigla_categoria_de_ameaca == "")
data[25845,]
data <-readRDS("./data/especies_2020_pronto.RDS")%>%
filter(fauna_flora != "")
data %>%
distinct(bioma, sigla_categoria_de_ameaca, especie_simplificado)%>%
group_by(bioma, sigla_categoria_de_ameaca)%>%
count()
extinto <- c("CR PEW", "EW", "CR PEX")
#transformando as siglas CR PEW, CR PEX E EX em uma só, "Extinto"
#para isso, usou-se a função recode. Copiou-se o df para uma variavel para não alterar a
# o df original. O recode ele usa um vector como um argumento, e por isso usamos na coluna espeficica
#e não dentro do %>%
bioma_analise <- data
bioma_analise$sigla_categoria_de_ameaca <- recode(bioma_analise$sigla_categoria_de_ameaca,
"CR PEW" = "Extinto", "EW" = "Extinto", "CR PEX" = "Extinto")
bioma_analise_copia <- bioma_analise %>%
filter(sigla_categoria_de_ameaca == "Extinto") %>% #filtrar quem tá extinto
group_by(sigla_categoria_de_ameaca, bioma) %>% #agrupar por bioma
count() #ver a quantidade de extintos por bioma
bioma_analise %>%
group_by(bioma, sigla_categoria_de_ameaca) %>%
count()
grau_de_risco_bioma <- bioma_analise %>%
group_by(bioma, sigla_categoria_de_ameaca) %>%
count()
#explicação: pegou-se a função with e passou para os argumetnos o grau de risco e essa funçao opera
#sob o primeiro argumento, e a operacao escolhida foi order: primeiro em bioma e depois n.
grau_de_risco_bioma[with(grau_de_risco_bioma, order(bioma, -n)),]
data %>%
distinct(bioma, sigla_categoria_de_ameaca, especie_simplificado)%>%
group_by(bioma, sigla_categoria_de_ameaca)%>%
count() %>%
arrange(desc(n))
data %>%
distinct(bioma, sigla_categoria_de_ameaca, especie_simplificado)%>%
group_by(bioma, sigla_categoria_de_ameaca)%>%
count() %>%
group_by(bioma, sigla_categoria_de_ameaca)%>%
arrange(desc(n))
data %>%
distinct(bioma, sigla_categoria_de_ameaca, especie_simplificado)%>%
group_by(bioma, sigla_categoria_de_ameaca)%>%
count() %>%
group_by(bioma)%>%
arrange(desc(n))
data %>%
distinct(bioma, sigla_categoria_de_ameaca, especie_simplificado)%>%
group_by(bioma, sigla_categoria_de_ameaca)%>%
count() %>%
arrange(bioma, desc(n))
