str_replace_all(string, pattern = "\'.*;*\'", replacement = ",")
data2 <- data %>%
mutate(alterado = str_remove_all(V1, pattern = ","),
simples = str_replace_all(alterado, pattern = "\"", replacement = "\'"))
View(data2)
data2 <- data %>%
mutate(alterado = str_remove_all(V1, pattern = ","),
simples = str_replace_all(alterado, pattern = "\"", replacement = "\'"),
virgulas = str_replace_all(alterado, pattern = "\'.*;*\'", replacement = ","))
data2 <- data %>%
mutate(alterado = str_remove_all(V1, pattern = ","),
simples = str_replace_all(alterado, pattern = "\"", replacement = "\'"),
virgulas = str_replace_all(simples, pattern = "\'.*;*\'", replacement = ","))
data2 <- data %>%
mutate(alterado = str_remove_all(V1, pattern = ","),
simples = str_replace_all(alterado, pattern = "\"", replacement = "\'"),
virgulas = str_replace_all(simples, pattern = "\';*\'", replacement = ","))
data2[2,4]
data2 <- data %>%
mutate(alterado = str_remove_all(V1, pattern = ","),
simples = str_replace_all(alterado, pattern = "\"", replacement = "\'"),
virgulas = str_replace_all(simples, pattern = "\';*\'", replacement = "\',*\'"))
data2[2,4]
str_replace_all(string, pattern = "\';*\'", replacement = "\',\'")
string <- "'aerfsad;'asd; asda;"
str_replace_all(string, pattern = "\';*\'", replacement = "\',\'")
str_replace_all(string, pattern = "\'.*;*.*\'", replacement = "\'.*,*.*\'")
str_replace_all(string, pattern = "\'\.*;*\.*\'", replacement = "\'\.*,*\.*\'")
str_replace_all(string, pattern = "\'\\.*;*\\.*\'", replacement = "\'\\.*,*\\.*\'")
str_replace_all(string, pattern = "\'\\.*;\\.*\'", replacement = "\'\\.*,\\.*\'")
str_replace_all(string, pattern = "\'\\.*;\'", replacement = "\'\\.*,\'")
str_replace_all(string, pattern = "\'\\.*;\'", replacement = "\'\\.*,\'")
str_replace_all(string, pattern = "\\'\\.*;\\'", replacement = "\\'\\.*,\\'")
str_replace_all(string, pattern = "\'\\.*\;\'", replacement = "\'\\.*\,\'")
str_replace_all(string, pattern = "\'\\.*;\'", replacement = "\'\\.*\,\'")
str_replace_all(string, pattern = "\'\\.*;\'", replacement = "\'\\.*,\'")
str_replace_all(string, pattern = "\'\\.*; \'", replacement = "\'\\.*, \'")
str_replace_all(string, pattern = "\'\\.*;\\.*\'", replacement = "\'\\.*,\\.*\'")
str_replace_all(string, pattern = "\'.*\'", replacement = "\'a\'")
str_replace_all(string, pattern = "\'.*;\'", replacement = "\'a\'")
str_replace_all(string, pattern = "\'.*;\'", replacement = "\'a,\'")
str_replace_all(string, pattern = "\'.*;\'", replacement = "\'.*,\'")
str_replace_all(string, pattern = "\'\\.*;\'", replacement = "\'\\.*,\'")
str_replace_all(string, pattern = "\'.*;\'", replacement = "\'.*,\'")
str_replace_all(string, pattern = "\'.*;\'", replacement = "\'.*,\'")
str_replace_all(string, pattern = "\'.*;\'", replacement = "\',\'")
str_replace_all(string, pattern = "\'[:alpha:]"\'", replacement = "\' ,\'")
str_replace_all(string, pattern = "\'[:alpha:]\'", replacement = "\' ,\'")
str_replace_all(string, pattern = "\'[:alpha:].*\'", replacement = "\' ,\'")
str_replace_all(string, pattern = "\'[:alpha:].*\'", replacement = "\',\'")
str_replace_all(string, pattern = "\'[^:alpha:].*\'", replacement = "\',\'")
str_replace_all(string, pattern = "\'[^:alpha:]\'", replacement = "\',\'")
str_replace_all(string, pattern = "\'[^[:alpha:]]\'", replacement = "\',\'")
str_replace_all(string, pattern = "\'[^;]\'", replacement = "\',\'")
str_replace_all(string, pattern = "[^;]", replacement = "8")
str_replace_all(string, pattern = "[^:alpha]", replacement = "8")
str_replace_all(string, pattern = "[^:alpha:]", replacement = "8")
str_replace_all(string, pattern = "[^[:alpha:]]", replacement = "8")
str_replace_all(string, pattern = "[^[:alpha:| ]]", replacement = "8")
str_replace_all(string, pattern = "[^[:alpha:]| ]", replacement = "8")
str_replace_all(string, pattern = "[^[:alpha:]| ]", replacement = " ")
str_replace_all(string, pattern = "\'[^[:alpha:]]\'", replacement = " ")
str_replace_all(string, pattern = "\\'[^[:alpha:]]\\'", replacement = " ")
str_replace_all(string, pattern = "\'[^[:alpha:]]*\'", replacement = " ")
str_replace_all(string, pattern = "9[^[:alpha:]]*9", replacement = " ")
string <- "9aerfsad;9asd; asda;"
str_replace_all(string, pattern = "9[^[:alpha:]]*9", replacement = " ")
str_replace_all(string, pattern = "9[^[:alpha:]]9", replacement = " ")
str_replace_all(string, pattern = "9", replacement = " ")
str_replace_all(string, pattern = "9.*", replacement = ".*")
str_replace_all(string, pattern = "^9;*9$", replacement = "K")
string <- "9 aerfsad;9 asd; asda;"
str_replace_all(string, pattern = "9[^[:alpha:]]9", replacement = "K")
str_replace_all(string, pattern = "9[^ ]9", replacement = "K")
str_replace_all(string, pattern = "9[^\ ]9", replacement = "K")
str_replace_all(string, pattern = "^\\.[^a]$\\.", replacement = "K")
string <- "... a8erfs4ad;... asd; asda;"
str_replace_all(string, pattern = "^\\.[^a]$\\.", replacement = "K")
str_replace_all(string, pattern = "[^a]", replacement = "K")
str_replace_all(string, pattern = "\\.[^a]\\.", replacement = "K")
str_replace_all(string, pattern = "\\..*[^a].*\\.", replacement = "K")
str_replace_all(string, pattern = "\\..*[^a].*\\.", replacement = "K.*")
library(tidyverse)
library(tidyverse)
a <- read.csv("./data/especies_2020_pronto.csv")
glimpse(a)
a %>%
filter(Sigla.Categoria.de.Ameaça == "EW")
a[,2:15] <- map_df(a[, 2:15], as.character)
glimpse(a)
View(a)
library(janitor)
data <- a
data <- clean_names(data)
glimpse(data)
a %>%
filter(Sigla.Categoria.de.Ameaça == "EW")
a %>%
filter(sigla_categoria_de_ameaca == "EW")
data %>%
filter(sigla_categoria_de_ameaca == "EW")
data
data %>%
filter("EW" %in% sigla_categoria_de_ameaca)
levels(as.factor(data$sigla_categoria_de_ameaca))
head(data)
glimpse(data)
data[,2:15] <- map_df(data[, 2:15], str_squish)
data %>%
filter(sigla_categoria_de_ameaca == "EW")
View(data)
library(shiny); runApp('shiny/app-especies-extincao.R')
library(shinydashboard)
install.packages("shinydashboard")
library(shiny); runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
shiny::runApp('test')
source('test/app.R')
data <- read.csv("especies_2020_pronto.csv")
library(tidyverse)
data <- read.csv("./data/especies_2020_pronto.csv")
glimpse(data)
library(janitor)
data <- data %>% clean_names(data)
data <- map_df(clean_names, data)
data <- map_df(clean_names, data[,])
data <- clean_names(data)
glimpse(data)
?str_squish
data <- map_df(data, as.character)
data <- map_df(data, str_squish)
glimpse(data)
View(data)
?str_split
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
str_split(fruits, " and ")
str_split(fruits, " and ", simplify = TRUE)
glimse(cata)
glimpse(data)
data %>% #estados_de_ocorrencia, principais_ameacas, bioma
str_split(estados_de_ocorrencia) %>% glimpse()
data %>% #estados_de_ocorrencia, principais_ameacas, bioma
str_split(estados_de_ocorrencia) %>% glimpse()
data %>% #estados_de_ocorrencia, principais_ameacas, bioma
str_split(estados_de_ocorrencia, pattern = ", ") %>%
glimpse()
?separate
data %>% #estados_de_ocorrencia, principais_ameacas, bioma
separate_rows(estados_de_ocorrencia, sep = ", ") %>%
glimpse()
data %>% #estados_de_ocorrencia, principais_ameacas, bioma
separate_rows(bioma, sep = ", ") %>%
separate_rows(estados_de_ocorrencia, sep = ", ") %>%
separate_rows(princiais_ameacas, sep = ", ") %>%
glimpse()
data %>% #estados_de_ocorrencia, principais_ameacas, bioma
separate_rows(bioma, sep = ", ") %>%
separate_rows(estados_de_ocorrencia, sep = ", ") %>%
separate_rows(principais_ameacas, sep = ", ") %>%
glimpse()
data %>% #estados_de_ocorrencia, principais_ameacas, bioma
separate_rows(bioma, sep = ", ") %>%
separate_rows(estados_de_ocorrencia, sep = ", ") %>%
separate_rows(principais_ameacas, sep = ", ") %>%
View()
ata <- data %>% #estados_de_ocorrencia, principais_ameacas, bioma
separate_rows(bioma, sep = ", ") %>%
separate_rows(estados_de_ocorrencia, sep = ", ") %>%
separate_rows(principais_ameacas, sep = ", ")
data <- data %>% #estados_de_ocorrencia, principais_ameacas, bioma
separate_rows(bioma, sep = ", ") %>%
separate_rows(estados_de_ocorrencia, sep = ", ") %>%
separate_rows(principais_ameacas, sep = ", ")
levels(as.factor(data$principais_ameacas))
data <- read.csv("./data/especies_2020_pronto.csv")
data <- clean_names(data)
data <- map_df(data, as.character)
data <- map_df(data, str_squish)
levels(as.factor(data$principais_ameacas))
### PACOTES NECESSARIOS ----
library(tidyverse)
library(data.table)
library(janitor)
# ler o arquivo considerando as aspas como parte do texto,
#cada obs é uma linha, uma única variável
data <- read.csv('./data/especies_2020.csv', sep = '\n', encoding = 'UTF-8', quote = "\"", skip = 1, header = FALSE)
# ler o arquivo considerando as aspas como parte do texto,
#cada obs é uma linha, uma única variável
data <- read.csv('./data/arquivos intermediarios/especies_2020.csv', sep = '\n', encoding = 'UTF-8', quote = "\"", skip = 1, header = FALSE)
View(data)
data2 <- data %>%
mutate(#alterado = str_remove_all(V1, pattern = ","), #remove virgulas indesejadas
simples = str_replace_all(alterado, pattern = "\"", replacement = "\'"),
#troca aspas duplas do texto por simples
simples = str_replace_all(simples, ";", "; "), #padroniza espacos de ;
simples = str_replace_all(simples, ":|/|\\(|\\)|-", " "), #remove simbolos indesejados
simples = str_squish(simples)) %>% #padroniza quantidade de espacos e trim edges
select(simples) #deixa so essa variavel
data2$simples <- iconv(data2$simples,from="UTF-8",to="ASCII//TRANSLIT")
#remove diacriticos
data2$novos <- NA
data2 <- data %>%
mutate(#alterado = str_remove_all(V1, pattern = ","), #remove virgulas indesejadas
simples = str_replace_all(alterado, pattern = "\"", replacement = "\'"),
#troca aspas duplas do texto por simples
simples = str_replace_all(simples, ";", "; "), #padroniza espacos de ;
simples = str_replace_all(simples, ":|/|\\(|\\)|-", " "), #remove simbolos indesejados
simples = str_squish(simples)) %>% #padroniza quantidade de espacos e trim edges
select(simples) #deixa so essa variavel
data2 <- data %>%
mutate(#alterado = str_remove_all(V1, pattern = ","), #remove virgulas indesejadas
simples = str_replace_all(V1, pattern = "\"", replacement = "\'"),
#troca aspas duplas do texto por simples
simples = str_replace_all(simples, ";", "; "), #padroniza espacos de ;
simples = str_replace_all(simples, ":|/|\\(|\\)|-", " "), #remove simbolos indesejados
simples = str_squish(simples)) %>% #padroniza quantidade de espacos e trim edges
select(simples) #deixa so essa variavel
data2$simples <- iconv(data2$simples,from="UTF-8",to="ASCII//TRANSLIT")
#remove diacriticos
data2$novos <- NA
View(data2)
for (i in 1:dim(data2[1])) {
#extrai as strings no padrao e substitui ; por , em uma df nova
repo <- str_extract_all(data2[i,1], pattern = "\'[a-zA-Z; ]+\'") %>% as.data.frame()
repo[,1] <- str_replace_all(repo[,1], pattern = ";", replacement = ".")
#cria uma df com marcadores no lugar da string extraída
replace <- data2[i,]
for (j in 1:dim(repo)[1]){
replace <- str_replace(replace, pattern = "\'[a-zA-Z; ]+\'",
replacement = paste("repo", as.character(j), sep = ""))
}
# pra cada linha de repo, ie intervalos a serem substituidos
for(k in 1:dim(repo)[1]){ #substitua o termo "repo(j)" pela linha j de repo
substituto <- repo[j,1]
replace <- str_replace_all(replace,
pattern = paste("repo", as.character(k), sep = ""),
replacement = repo[k,1])
}
data2[i,2] <- replace[1]
}
data2$substituicoes <- data2[,1]
data2$substituicoes[which(is.na(data2[,2]) == FALSE)] <- data2[which(is.na(data2[,2]) == FALSE),2]
nomes <- read.csv('./data/arquivos intermediarios/especies_2020.csv', sep = ';', encoding = 'UTF-8', header = FALSE, nrows = 1)
nomes <- as.character(nomes[1,]) %>%
str_remove_all(pattern = ",")%>%
str_trim()
nomes
head(data2$substituicoes, 15)
#cria banco final para povoamento ----
especies_2020_limpo <- data.frame(subs = data2$substituicoes) %>%
separate(subs, into = nomes, sep = ";")
View(especies_2020_limpo)
levels(as.factor(especies_2020_limpo$Bioma))
cobra <- "Fauna; Repteis; Dipsadidae; Hydrodynastes melanogigas; Cobra dagua grande do tocantins;
Em Perigo EN; EN; Cerrado; 'Assentamento Humano cidades, Outras Atividades Economicas Energia'; Sim;
Sim; Nao; 2; Sim; Informacao nao disponivel"
cobra_df <- data.frame(subs = cobra) %>%
separate(subs, into = nomes, sep = ";")
#insercao do caso final ----
especies_2020_limpo[1436,] <- cobra_df[1,]
#remocao final de aspas simples ----
especies_2020_pronto <- map_df(especies_2020_limpo, str_remove_all, pattern = "\\'")
especies_2020_pronto <- map_df(especies_2020_pronto, as.character)
especies_2020_pronto <- map_df(especies_2020_pronto, str_squish)
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]"))
View(final)
View(final)
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]"))
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = ". ") %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = ". ") %>%
separate_rows(estados_de_ocorrencia, sep = " ")
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]")) %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = ". ") %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = ". ") %>%
separate_rows(estados_de_ocorrencia, sep = " ")
View(final)
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]")) %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = ". ") %>%
separate_rows(principais_ameacas, sep = ", ") %>%
separate_rows(principais_ameacas, sep = " , ") %>%
separate_rows(principais_ameacas, sep = ". ") %>%
separate_rows(estados_de_ocorrencia, sep = " ")
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]")) %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = ". ")
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]")) %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = ". ") %>%
separate_rows(principais_ameacas, sep = ", ")
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]")) %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = ". ") %>%
separate_rows(principais_ameacas, sep = ", ") %>%
separate_rows(principais_ameacas, sep = " , ")
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]")) %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = ". ") %>%
separate_rows(principais_ameacas, sep = ", ") %>%
separate_rows(principais_ameacas, sep = " , ") %>%
separate_rows(principais_ameacas, sep = ". ")
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]")) %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = ". ") %>%
separate_rows(principais_ameacas, sep = ", ") %>%
separate_rows(principais_ameacas, sep = " , ") %>%
separate_rows(principais_ameacas, sep = "\\. ")
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]")) %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = ". ") %>%
separate_rows(principais_ameacas, sep = ", ") %>%
separate_rows(principais_ameacas, sep = " , ") %>%
separate_rows(principais_ameacas, sep = "\\. ") %>%
separate_rows(estados_de_ocorrencia, sep = " ")
?map_df
### PACOTES NECESSARIOS ----
library(tidyverse)
library(data.table)
library(janitor)
### LEITURA DO ARQUIVO ----
# ler o arquivo considerando as aspas como parte do texto,
#cada obs é uma linha, uma única variável
data <- read.csv('./data/arquivos intermediarios/especies_2020.csv', sep = '\n', encoding = 'UTF-8', quote = "\"", skip = 1, header = FALSE)
### SIMPLIFICACAO DA GRAFIA ----
data2 <- data %>%
mutate(#alterado = str_remove_all(V1, pattern = ","), #remove virgulas indesejadas
simples = str_replace_all(V1, pattern = "\"", replacement = "\'"),
#troca aspas duplas do texto por simples
simples = str_replace_all(simples, ";", "; "), #padroniza espacos de ;
simples = str_replace_all(simples, ":|/|\\(|\\)|-", " "), #remove simbolos indesejados
simples = str_squish(simples)) %>% #padroniza quantidade de espacos e trim edges
select(simples) #deixa so essa variavel
data2$simples <- iconv(data2$simples,from="UTF-8",to="ASCII//TRANSLIT")
#remove diacriticos
data2$novos <- NA
### SUBSTITUICAO DOS ; ESPECIFICOS POR , ----
for (i in 1:dim(data2[1])) {
#extrai as strings no padrao e substitui ; por , em uma df nova
repo <- str_extract_all(data2[i,1], pattern = "\'[a-zA-Z; ]+\'") %>% as.data.frame()
repo[,1] <- str_replace_all(repo[,1], pattern = ";", replacement = ".")
#cria uma df com marcadores no lugar da string extraída
replace <- data2[i,]
for (j in 1:dim(repo)[1]){
replace <- str_replace(replace, pattern = "\'[a-zA-Z; ]+\'",
replacement = paste("repo", as.character(j), sep = ""))
}
# pra cada linha de repo, ie intervalos a serem substituidos
for(k in 1:dim(repo)[1]){ #substitua o termo "repo(j)" pela linha j de repo
substituto <- repo[j,1]
replace <- str_replace_all(replace,
pattern = paste("repo", as.character(k), sep = ""),
replacement = repo[k,1])
}
data2[i,2] <- replace[1]
}
#cria uma nova variável com o texto final ----
data2$substituicoes <- data2[,1]
data2$substituicoes[which(is.na(data2[,2]) == FALSE)] <- data2[which(is.na(data2[,2]) == FALSE),2]
#adquire nomes das variaveis do banco final ----
nomes <- read.csv('./data/arquivos intermediarios/especies_2020.csv', sep = ';', encoding = 'UTF-8', header = FALSE, nrows = 1)
nomes <- as.character(nomes[1,]) %>%
str_remove_all(pattern = ",")%>%
str_trim()
#cria banco final para povoamento ----
especies_2020_limpo <- data.frame(subs = data2$substituicoes) %>%
separate(subs, into = nomes, sep = ";")
#ajustamento do 1 caso que nao se ajusta ----
cobra <- "Fauna; Repteis; Dipsadidae; Hydrodynastes melanogigas; Cobra dagua grande do tocantins;
Em Perigo EN; EN; Cerrado; 'Assentamento Humano cidades, Outras Atividades Economicas Energia'; Sim;
Sim; Nao; 2; Sim; Informacao nao disponivel"
cobra_df <- data.frame(subs = cobra) %>%
separate(subs, into = nomes, sep = ";")
#insercao do caso final ----
especies_2020_limpo[1436,] <- cobra_df[1,]
#remocao final de aspas simples ----
especies_2020_pronto <- map_df(especies_2020_limpo, str_remove_all, pattern = "\\'")
especies_2020_pronto <- map_df(especies_2020_pronto, as.character)
especies_2020_pronto <- map_df(especies_2020_pronto, str_squish)
#producao de arquivo final rda e csv ----
final <- especies_2020_pronto %>% #edixar explicitas as separacoes
clean_names()%>%
mutate(estados_de_ocorrencia = str_remove_all(estados_de_ocorrencia, pattern = "[:punct:]")) %>%
separate_rows(bioma, sep = ", ") %>%
separate_rows(bioma, sep = " , ") %>%
separate_rows(bioma, sep = ". ") %>%
separate_rows(principais_ameacas, sep = ", ") %>%
separate_rows(principais_ameacas, sep = " , ") %>%
separate_rows(principais_ameacas, sep = "\\. ") %>%
separate_rows(estados_de_ocorrencia, sep = " ")
rm(cobra_df, data, data2, especies_2020_limo, especies_2020_pronto, repo, cobra,
i, j, k, nomes, replace, substituto)
rm(cobra_df, data, data2, especies_2020_limpo, especies_2020_pronto, repo, cobra,
i, j, k, nomes, replace, substituto)
saveRDS(final, './data/especies_2020_pronto.RDS')
write.csv(final, './data/especies_2020_pronto.csv')
?load
data <- load("./data/especies_2020_pronto.RDS")
glimpse(data)
data <- readRDS("~/UnB/4 Semestre/CE2/ce2-especies-extincao/data/especies_2020_pronto.RDS")
glimpse(data)
View(data)
?selectInput
source('test/app.R')
source('test/app.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
?saveRDS
rm(a, data)
data <- readRDS("../data/especies_2020_pronto.RDS")
data <- readRDS("./data/especies_2020_pronto.RDS")
View(data)
?selectInput
library(shinydashboard)
library(shiny)
library(tidyverse)
?selectInput
View(data)
levels(as.factors(data$fauna_flora))
levels(as.factor(data$fauna_flora))
data <- readRDS("../data/especies_2020_pronto.RDS") %>%
filter(fauna_flora != "")
data <- readRDS("./data/especies_2020_pronto.RDS") %>%
filter(fauna_flora != "")
levels(as.factor(data$fauna_flora))
?radioButtons
data %>% filter(familia != NULL)
glimpse(data)
data %>%pull(especie_simplificado) %>%
unique()
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
?outputOptions
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
?renderUI
?ns
?NS
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
?str_replace_all
especie <- "Abatia angeliana"
paste("https://pt.wikipedia.org/wiki/", str_replace_all(especie, pattern = " ", replacement = "_"))
paste("https://pt.wikipedia.org/wiki/",
str_replace_all(especie, pattern = " ", replacement = "_"),
sep = "")
runApp('shiny/app-especies-extincao.R')
runApp('shiny/app-especies-extincao.R')
library(here)
here()
runApp('shiny/app-especies-extincao.R')
library(shiny); runApp('shiny/app-especies-extincao.R')
